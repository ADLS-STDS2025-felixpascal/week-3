{
  "hash": "c3b2ca7d668c1dbc9952816fc24f7ed1",
  "result": {
    "engine": "knitr",
    "markdown": "#\n\n\n---\ntitle: \"Solution for Week 2: Raster Data Processing\"\nformat: html\n---\n\n\n\n# **Introduction**\nIn this document, I solve the tasks for **week 2** of the course  \n*Spatiotemporal Datascience*. The goal is to **redo last week's analysis** using **raster data instead of vector data**.  \nAdditionally, I will **compare execution times** between the two approaches using the **`tictoc`** package.\n\n---\n\n## **Load Libraries**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load necessary packages\nlibrary(sf)        # For vector data\nlibrary(ggplot2)   # For visualization\nlibrary(dplyr)     # For data manipulation\nlibrary(terra)     # For raster processing\nlibrary(tictoc)    # For execution time measurement\nlibrary(tibble)    # For cleaner outputs\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define file paths\ntlm3d_path <- \"data/SWISSTLM3D_2025.gpkg\"\nboundaries_path <- \"data/swissBOUNDARIES3D_1_5_LV95_LN02.gpkg\"\n\n# Load the vector datasets\ntic(\"Load vector data\")\ntlm3d <- read_sf(tlm3d_path, \"tlm_bb_bodenbedeckung\")\nswiss_boundaries <- read_sf(boundaries_path, \"tlm_kantonsgebiet\")\ntoc()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nLoad vector data: 73.5 sec elapsed\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntic(\"Filter forest areas (Vector)\")\nforests <- filter(tlm3d, objektart == \"Wald\")\nforests <- st_set_crs(forests, 2056)\ntoc()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nFilter forest areas (Vector): 4.55 sec elapsed\n```\n\n\n:::\n\n```{.r .cell-code}\n# Plot vector-based forests\nggplot() +\n  geom_sf(data = forests, fill = \"darkgreen\", color = NA) +\n  ggtitle(\"Forested Areas in Switzerland (Vector)\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntic(\"Calculate forest area per canton (Vector)\")\ncanton_forest_area <- forests %>%\n  st_intersection(swiss_boundaries) %>%\n  group_by(name) %>%\n  summarise(ForestArea = sum(st_area(geom))) %>%\n  ungroup()\nforest_area_vector_time <- toc()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCalculate forest area per canton (Vector): 525.58 sec elapsed\n```\n\n\n:::\n\n```{.r .cell-code}\ntic(\"Calculate total area per canton (Vector)\")\ncanton_total_area <- swiss_boundaries %>%\n  group_by(name) %>%\n  summarise(TotalArea = sum(st_area(geom))) %>%\n  ungroup() %>%\n  st_drop_geometry()\ntotal_area_vector_time <- toc()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCalculate total area per canton (Vector): 0.63 sec elapsed\n```\n\n\n:::\n\n```{.r .cell-code}\ntic(\"Compute forest coverage percentage (Vector)\")\nforest_coverage_vector <- left_join(canton_forest_area, canton_total_area, by = \"name\") %>%\n  mutate(ForestPercentage = (ForestArea / TotalArea) * 100)\ncoverage_vector_time <- toc()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCompute forest coverage percentage (Vector): 0.54 sec elapsed\n```\n\n\n:::\n\n```{.r .cell-code}\n# Print results\nas_tibble(st_drop_geometry(forest_coverage_vector))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 26 × 4\n   name                    ForestArea   TotalArea ForestPercentage\n   <chr>                        [m^2]       [m^2]              [1]\n 1 Aargau                  489875833. 1403798009.             34.9\n 2 Appenzell Ausserrhoden   76630211.  242836490.             31.6\n 3 Appenzell Innerrhoden    47223028.  172476020.             27.4\n 4 Basel-Landschaft        202579073.  517668761.             39.1\n 5 Basel-Stadt               4652462.   36953764.             12.6\n 6 Bern                   1667235367. 5958505730.             28.0\n 7 Fribourg                417889316. 1672427799.             25.0\n 8 Genève                   32741213.  282487194.             11.6\n 9 Glarus                  166198271.  685314332.             24.3\n10 Graubünden             1614784555. 7105296294.             22.7\n# ℹ 16 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresolution <- 25  \n\n# Create raster template\ntic(\"Create raster template\")\nraster_template <- rast(ext(forests), resolution = c(resolution, resolution), crs = st_crs(forests)$wkt)\ntoc()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCreate raster template: 0.05 sec elapsed\n```\n\n\n:::\n\n```{.r .cell-code}\n# Rasterize forests\ntic(\"Rasterize forests\")\nforest_raster <- rasterize(vect(forests), raster_template, field = 1, fun = \"sum\", background = 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n|---------|---------|---------|---------|\n=========================================\n                                          \n```\n\n\n:::\n\n```{.r .cell-code}\ntoc()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRasterize forests: 60.83 sec elapsed\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(forest_raster, main = \"Forest Coverage (Raster, Improved)\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntic(\"Rasterize canton boundaries\")\ncanton_raster <- rasterize(vect(swiss_boundaries), forest_raster, field = \"kantonsnummer\", fun = \"max\")\nrasterize_canton_time <- toc()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRasterize canton boundaries: 4.32 sec elapsed\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(canton_raster, main = \"Canton Boundaries (Raster)\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntic(\"Calculate forest area per canton (raster)\")\nforest_area_raster <- zonal(forest_raster, canton_raster, fun = \"sum\", na.rm = TRUE)\nforest_area_raster_time <- toc()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCalculate forest area per canton (raster): 4.84 sec elapsed\n```\n\n\n:::\n\n```{.r .cell-code}\ntic(\"Calculate total area per canton (raster)\")\ndummy_raster <- canton_raster\nvalues(dummy_raster) <- 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n|---------|---------|---------|---------|\n=========================================\n                                          \n```\n\n\n:::\n\n```{.r .cell-code}\ntotal_area_raster <- zonal(dummy_raster, canton_raster, fun = \"sum\", na.rm = TRUE)\ntotal_area_raster_time <- toc()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCalculate total area per canton (raster): 8.41 sec elapsed\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntic(\"Compute forest coverage percentage (Raster)\")\n\n# Convert pixel counts to square meters\nforest_area_raster[, 2] <- forest_area_raster[, 2] * (resolution^2)\ntotal_area_raster[, 2] <- total_area_raster[, 2] * (resolution^2)\n\ncolnames(forest_area_raster) <- c(\"kantonsnummer\", \"ForestArea\")\ncolnames(total_area_raster) <- c(\"kantonsnummer\", \"TotalArea\")\n\nforest_coverage_raster <- merge(forest_area_raster, total_area_raster, by = \"kantonsnummer\")\nforest_coverage_raster$ForestPercentage <- (forest_coverage_raster$ForestArea / forest_coverage_raster$TotalArea) * 100\ncoverage_raster_time <- toc()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCompute forest coverage percentage (Raster): 0 sec elapsed\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(forest_coverage_raster)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   kantonsnummer ForestArea  TotalArea ForestPercentage\n1              1  503343750 1728958750         29.11254\n2              2 1667481250 5958496875         27.98493\n3              3  406561875 1493517500         27.22177\n4              4  154041250 1076518125         14.30921\n5              5  270978125  907844375         29.84852\n6              6  174079375  490594375         35.48336\n7              7   83514375  275862500         30.27391\n8              8  166253125  685310625         24.25953\n9              9   62382500  238739375         26.12996\n10            10  417823125 1672422500         24.98311\n11            11  319869375  790455000         40.46649\n12            12    4647500   36957500         12.57526\n13            13  202555625  517667500         39.12852\n14            14  125478125  298430625         42.04599\n15            15   76562500  242826875         31.52966\n16            16   47255625  172472500         27.39893\n17            17  536635000 2028258750         26.45792\n18            18 1615081875 7103067500         22.73781\n19            19  489928750 1403778750         34.90071\n20            20  199535000  994294375         20.06800\n21            21 1194708125 2812152500         42.48376\n22            22  944718750 3212029375         29.41190\n23            23 1048090000 5224634375         20.06054\n24            24  274360000  802171250         34.20217\n25            25   32824375  282475000         11.62028\n26            26  334339375  838511875         39.87294\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Sum total execution times for vector and raster approach\nvector_total_time <- sum(\n  forest_area_vector_time$toc - forest_area_vector_time$tic,\n  total_area_vector_time$toc - total_area_vector_time$tic,\n  coverage_vector_time$toc - coverage_vector_time$tic\n)\n\nraster_total_time <- sum(\n  rasterize_canton_time$toc - rasterize_canton_time$tic,\n  forest_area_raster_time$toc - forest_area_raster_time$tic,\n  total_area_raster_time$toc - total_area_raster_time$tic,\n  coverage_raster_time$toc - coverage_raster_time$tic\n)\n\n# Create execution time comparison plot\nexecution_times <- data.frame(\n  Method = c(\"Vector\", \"Raster\"),\n  Time = c(vector_total_time, raster_total_time)\n)\n\nggplot(execution_times, aes(x = Method, y = Time, fill = Method)) +\n  geom_bar(stat = \"identity\") +\n  ggtitle(\"Execution Time: Vector vs Raster Approach\") +\n  ylab(\"Time (seconds)\") +\n  xlab(\"Approach\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\ncat(\"  \n## **Discussion and Comparison of the Two Approaches**  \n\nThe results show that the **raster approach is much faster** than the vector approach. While the vector method took almost **8 minutes**, the raster method finished in just a **few seconds**. The biggest slowdown in the vector method seems to come from **spatial intersections (`st_intersection`)**, which take a long time when working with complex polygons. In contrast, raster calculations seem to be more efficient since they work on a **grid-based system**.    \n\nThis result was sort of expected, since we already discussed in the previous lecture that that *'raster is faster'*, but I was still surprised by **how big the difference actually is**. The results between the two approaches are quite similar, but there could be **some minor differences** due to raster resolution and edge effects.    \n\nIt would be interesting to see **how the results change when using different raster resolutions**. A smaller grid might increase precision but slow down processing, while a larger grid could make it even faster but might reduce accuracy. This could be something to test in future work.  \n\")\n\n\")\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
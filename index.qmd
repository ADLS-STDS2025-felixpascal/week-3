#
---
title: "Solution for Week 4: Vector Advanced"
format: html
---
# **Introduction**
   
In this document, I solve the tasks for week 4 of the course 
*Spatiotemporal Datascience*. The goal is to calculate the percentage of forest area per canton  using **DuckDB** and to compare it with previous approaches. Also the goal of this task is to understand topological relations interact.


```{r, warning=FALSE, message=FALSE}
# Task a)
# The king can move to any adjacent square, meaning it must touch other squares at an edge or a corner.

# 1. Interiors should not overlap (F), because each square is separate.
# 2. The king's exterior intersects with the boundaries of the reachable squares -> leading to Exterior-Boundary (EB) = T.
# 3. Everything else doesn't not matter (*).

# Which is: F*****T**

# Task b)
# The bishop can only move diagonally, which means it must touch other squares only at a corner. 

# 1. The interiors do not overlap (F).
# 2. The boundaries touch at a point (0).
# Everything else does not matter (*).

# Which results in: F***0****
```

```{r, warning=FALSE, message=FALSE}
library(DBI)
library(duckdb)
library(sf)
library(tidyverse)
library(tictoc)

# Start measuring execution time for the DuckDB approach
tic("DuckDB Approach")

# Connect to DuckDB
con <- dbConnect(duckdb::duckdb(), "data/wald-kantone.duckdb")

# Enable spatial functions
dbExecute(con, "INSTALL spatial;")  
dbExecute(con, "LOAD spatial;")    

# **Create Spatial Index for Faster Queries**
dbExecute(con, "CREATE INDEX IF NOT EXISTS kantone_idx ON kantone USING RTREE (geom);")
dbExecute(con, "CREATE INDEX IF NOT EXISTS wald_idx ON wald USING RTREE (geom);")

# **Step 1: Create a subset view (optional)**
dbExecute(con, "CREATE OR REPLACE VIEW wald2 AS SELECT * FROM wald LIMIT 1000;")

# **Step 2: Compute forest-canton intersections**
dbExecute(con, "
  CREATE OR REPLACE VIEW wald_kantone AS
  SELECT 
    kantone.name, 
    ST_Area(ST_Intersection(wald2.geom, kantone.geom)) AS wald_area
  FROM wald2, kantone
  WHERE ST_Intersects(wald2.geom, kantone.geom);
")

# **Step 3: Aggregate the forest area per canton**
dbExecute(con, "
  CREATE OR REPLACE VIEW wald_kanton_grp AS
  SELECT 
    name, 
    SUM(wald_area) AS wald_area
  FROM wald_kantone
  GROUP BY name;
")

# **Step 4: Compute the fraction of forest area per canton**
dbExecute(con, "
  CREATE OR REPLACE VIEW kanton_frac AS
  SELECT 
    kantone.name,                 
    wald_area / area AS waldanteil
  FROM wald_kanton_grp 
  LEFT JOIN kantone 
  ON wald_kanton_grp.name = kantone.name
  ORDER BY waldanteil DESC;
")

# **Step 5: Import results into R**
kanton_frac <- dbReadTable(con, "kanton_frac")

# Close connection
dbDisconnect(con, shutdown=TRUE)

# Stop measuring execution time
duckdb_time <- toc()
duckdb_time_value <- duckdb_time$toc - duckdb_time$tic

# **Visualization - Map**
ggplot(kanton_frac) +
  geom_bar(aes(x = reorder(name, -waldanteil), y = waldanteil), stat = "identity", fill = "darkgreen") +
  coord_flip() +
  labs(title = "Percentage of Forest Area per Canton",
       subtitle = "Using Optimized DuckDB Query",
       x = "Canton",
       y = "Forest Coverage (%)") +
  theme_minimal()

# **Visualization - Execution Time**
execution_times <- tibble(
  Approach = "Optimized DuckDB",
  Time_Seconds = duckdb_time_value
)

ggplot(execution_times, aes(x = Approach, y = Time_Seconds, fill = Approach)) +
  geom_bar(stat = "identity") +
  labs(title = "Execution Time of DuckDB Approach",
       y = "Time (Seconds)") +
  theme_minimal()

# Print execution time
print(paste("Optimized DuckDB execution time:", round(duckdb_time_value, 2), "seconds"))
```
# The optimized DuckDB approach is much faster than the vector-based method, which took over 400 seconds,
# while DuckDB completed the task in just 1.5 seconds. So the SQL-based spatial processing can drastically improve
# performance for large datasets. However, the spatial queries are not very straight forward to set up and because of that
# the results must incorrect, but due to time constraints, they have not been fixed before submission.
